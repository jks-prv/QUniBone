# Inherited from
# http://mythopoeic.org/bbb-pru-minimal/
#
# modified for cross compile and remote debugging on BBB

ifeq ($(QUNIBONE_PLATFORM),UNIBUS)
    QUNIBONE_PLATFORM_LOWER := unibus
else ifeq ($(QUNIBONE_PLATFORM),QBUS)
    QUNIBONE_PLATFORM_LOWER := qbus
else
    $(error Set QUNIBONE_PLATFORM to UNIBUS or QBUS!)
endif

PROG = demo
# QUNIBONE_DIR from environment
QUNIBONE_ROOT = $(QUNIBONE_DIR)

PRU_PACKAGE_ROOT = $(QUNIBONE_ROOT)/91_3rd_party/am335x_pru_package

COMMON_SRC_DIR = $(QUNIBONE_ROOT)/90_common/src
SHARED_SRC_DIR = $(QUNIBONE_ROOT)/10.01_base/2_src/shared
PRU0_BASE_SRC_DIR = $(QUNIBONE_ROOT)/10.01_base/2_src/pru0
PRU1_BASE_SRC_DIR = $(QUNIBONE_ROOT)/10.01_base/2_src/pru1$(QUNIBONE_PLATFORM_SUFFIX)
PRU_DEPLOY_DIR = $(QUNIBONE_ROOT)/10.01_base/4_deploy$(QUNIBONE_PLATFORM_SUFFIX)
BASE_SRC_DIR = $(QUNIBONE_ROOT)/10.01_base/2_src/arm
DEVICE_SRC_DIR = $(QUNIBONE_ROOT)/10.02_devices/2_src
APP_SRC_DIR = $(QUNIBONE_ROOT)/10.03_app_demo/2_src
DEVEXER_SRC_DIR = $(QUNIBONE_ROOT)/10.04_device_exerciser/2_src

# PRUSSDRV includes
PRUSS_INCLUDE_DIR = $(PRU_PACKAGE_ROOT)/include
# ARM LIBRARIES
PRUSS_DRV_LIB = $(PRU_PACKAGE_ROOT)/bin-bbb/libprussdrv.a

# -static: do not use shared libs, include all code into the binary
# (big binary, but BBB needs no shared libs of certain versions installed)
# Example: demo binary goes from 594K to 12.3MB !
# Exception: ASAN does not work with -static
LDFLAGS += -lstdc++ -lpthread $(PRUSS_DRV_LIB)

# compiler flags and libraries
ifeq ($(MAKE_CONFIGURATION),RELEASE)
    CC_DBG_FLAGS = -O3 -Wall -Wextra -DDBG
    LDFLAGS += -static
else ifeq ($(MAKE_CONFIGURATION),DBG)
    CC_DBG_FLAGS = -ggdb3 -O0 -Wall -Wextra -DDBG
    LDFLAGS += -static
else ifeq ($(MAKE_CONFIGURATION),ASAN)
    CC = clang++-6.0
    CMD_DEPS = /usr/bin/clang-6.0
    CC_DBG_FLAGS = -ggdb3 -Wall -Wextra -fsanitize=address -fsanitize-blacklist=$(APP_SRC_DIR)/asan-blacklist.txt
    CC_DBG_FLAGS += -DDBG
    CC_DBG_FLAGS += -O0 -fno-omit-frame-pointer
    LDFLAGS += -fsanitize=address
else
    $(error Set MAKE_CONFIGURATION to RELEASE, DBG or ASAN!)
endif

ifeq ($(MAKE_TARGET_ARCH),BBB)
    # cross compile on x64 for BBB
    CC = $(BBB_CC)
    OS_CCDEFS = -DARM -U__STRICT_ANSI__
    OBJDIR = $(abspath ../4_deploy$(QUNIBONE_PLATFORM_SUFFIX))
else
    # local compile on BBB
    OS_CCDEFS = -DARM -U__STRICT_ANSI__
    OBJDIR = $(abspath ../4_deploy$(QUNIBONE_PLATFORM_SUFFIX))
endif

ifneq ($(CONFIGURATION_OPTIONS),)
    CCDEFS += $(addprefix -D,$(CONFIGURATION_OPTIONS))
endif
CCDEFS += -D$(QUNIBONE_PLATFORM)

SRC_DIRS = $(COMMON_SRC_DIR) $(SHARED_SRC_DIR) $(BASE_SRC_DIR) $(DEVICE_SRC_DIR) $(APP_SRC_DIR) $(DEVEXER_SRC_DIR)

VPATH = $(PRUSS_INCLUDE_DIR) $(SRC_DIRS)

CCFLAGS = \
    -std=c++11 \
    -I$(PRUSS_INCLUDE_DIR) \
    -I. \
    $(addprefix -I,$(SRC_DIRS)) \
    -I$(OBJDIR) \
    -I$(PRU_DEPLOY_DIR) \
    -MMD \
    -c \
    $(CCDEFS) $(CC_DBG_FLAGS) $(OS_CCDEFS)
# OBJDIR in includes because of $(PRU_CODE)
# no -std=c99


# PRU program code library. Binaries as C arrays
# ! Path to PRU_DEPLOY_DIR MUST NOT CONTAIn SPACES !
# ! dont use wildcards, as .../4_deploy/.. may be empty !
PRU0_CODE_LIST = \
    $(PRU_DEPLOY_DIR)/pru0_code_all_array.c

PRU1_CODE_LIST = \
    $(PRU_DEPLOY_DIR)/pru1_code_$(QUNIBONE_PLATFORM_LOWER)_array.c \
    $(PRU_DEPLOY_DIR)/pru1_code_test_array.c

SOURCES = \
    $(wildcard $(COMMON_SRC_DIR)/*.cpp) \
    $(wildcard $(COMMON_SRC_DIR)/*.c) \
    $(wildcard $(APP_SRC_DIR)/*.cpp) \
    $(wildcard $(DEVICE_SRC_DIR)/*.cpp) \
    $(wildcard $(DEVEXER_SRC_DIR)/*.cpp) \
    $(wildcard $(BASE_SRC_DIR)/*.cpp)

# only use the ka11.c source file from cpu20/
SOURCES += cpu20/ka11.c

OBJECTS = $(addprefix $(OBJDIR)/,$(addsuffix .o,$(basename $(notdir $(SOURCES)))))

# create needed directories
$(shell   mkdir -p $(PRU_DEPLOY_DIR) $(OBJDIR))

# rule to print a variable.
# use: make print-VARIABLE
print-%  : ; @echo $* = $($*)



all: config version $(CMD_DEPS) $(OBJDIR)/$(PROG)

config:
	@echo MAKE_CONFIGURATION = $(MAKE_CONFIGURATION)
	@echo CONFIGURATION_OPTIONS = $(CONFIGURATION_OPTIONS)
	@echo QUNIBONE_PLATFORM = $(QUNIBONE_PLATFORM)
	@echo QUNIBONE_PLATFORM_LOWER = $(QUNIBONE_PLATFORM_LOWER)
	@echo QUNIBONE_PLATFORM_SUFFIX = $(QUNIBONE_PLATFORM_SUFFIX)
	@echo OBJDIR = $(OBJDIR)
	@echo PRU1_BASE_SRC_DIR = $(PRU1_BASE_SRC_DIR)
	@echo PRU_DEPLOY_DIR = $(PRU_DEPLOY_DIR)

pru: $(PRU0_CODE_LIST) $(PRU1_CODE_LIST)

ifneq ($(OBJDIR),)
ifneq ($(PRU_DEPLOY_DIR),)
clean:
	rm -f $(OBJDIR)/$(PROG) $(OBJECTS) $(OBJDIR)/* $(PRU_DEPLOY_DIR)/*
endif
endif

.PHONY: all pru clean

/usr/bin/clang-6.0:
	@echo "################################"
	@echo "# installing clang-6.0 compiler"
	@echo "################################"
	-apt-get -y update
	apt-get -y install clang-6.0

# print compiler version
version:
	@echo CC = $(CC)
	$(CC) --version

# auto generation of dependency info, see:
#   http://scottmcpeak.com/autodepend/autodepend.html
#   http://make.mad-scientist.net/papers/advanced-auto-dependency-generation
df = $(basename $@)
POST_PROCESS_DEPS = \
	@mv -f $(df).d $(df).d.tmp; \
	sed -e 's|.*:|$(df).o:|' < $(df).d.tmp > $(df).d; \
	sed -e 's/.*://' -e 's/\\$$//' < $(df).d.tmp | fmt -1 | \
	sed -e 's/^ *//' -e 's/$$/:/' >> $(df).d; \
	rm -f $(df).d.tmp

# executable depends on its objects AND the PRU objects
$(OBJDIR)/$(PROG) : pru $(OBJECTS)
	$(CC) -o $@ $(OBJECTS) $(LDFLAGS)
	# force recompile on next build
	rm -f $(OBJDIR)/compile_timestamp.o
	file $@

# special build rules
$(OBJDIR)/ka11.o :  $(DEVICE_SRC_DIR)/cpu20/ka11.c
	$(CC) $(CCFLAGS) -xc++ -Wno-parentheses $< -o $@
	$(POST_PROCESS_DEPS)

$(OBJDIR)/rk11.o :  rk11.cpp
	$(CC) $(CCFLAGS) -Wno-missing-field-initializers $< -o $@
	$(POST_PROCESS_DEPS)

# files with PRU code and addresses
$(OBJDIR)/pru0_config.o: $(PRU_DEPLOY_DIR)/$(PRU0_CODE)
	$(CC) $(CCFLAGS) -xc++ $< -o $@
	$(POST_PROCESS_DEPS)

$(OBJDIR)/pru1_config.o: $(PRU_DEPLOY_DIR)/$(PRU1_CODE)
	$(CC) $(CCFLAGS) -xc++ $< -o $@
	$(POST_PROCESS_DEPS)

# generic build rules
$(OBJDIR)/%.o: %.c
	$(CC) $(CCFLAGS) -xc++ -o $@ $<
	$(POST_PROCESS_DEPS)

$(OBJDIR)/%.o: %.cpp
	$(CC) $(CCFLAGS) -o $@ $<
	$(POST_PROCESS_DEPS)

# the binary images for each of the 2 PRUs is generated with the clpru compiler
# and converted to a C array source code by hexpru -- array
#  $(SHARED_SRC_DIR)/*.h $(SHARED_SRC_DIR)/*.c
$(PRU0_CODE_LIST): $(PRU0_BASE_SRC_DIR)/*.h $(PRU0_BASE_SRC_DIR)/*.c $(SHARED_SRC_DIR)/*.h
	$(MAKE) -C $(PRU0_BASE_SRC_DIR) CCDEFS="$(CCDEFS)" $@
	echo PRU0 codefile $@ created
#	cp $(PRU_DEPLOY_DIR)/$(PRU0_CODE).[hc]

$(PRU1_CODE_LIST): $(PRU1_BASE_SRC_DIR)/*.h $(PRU1_BASE_SRC_DIR)/*.c $(SHARED_SRC_DIR)/*.h
	$(MAKE) -C $(PRU1_BASE_SRC_DIR) CCDEFS="$(CCDEFS)" $@
	echo PRU1 codefile $@ created
#	cp $(PRU_DEPLOY_DIR)/$(PRU0_CODE).[hc]

DEPS = $(OBJECTS:%.o=%.d)

debug: config
	@echo SRC_DIRS = $(SRC_DIRS)
	@echo VPATH = $(VPATH)
	@echo SOURCES = $(SOURCES)
	@echo DEPS = $(DEPS)
	@echo OBJECTS = $(OBJECTS)

-include $(DEPS)
